# -*- coding: utf-8 -*-

import logging

from .. import loader, utils

logger = logging.getLogger("friendly-telegram.modules.notes")


@loader.tds
class NotesMod(loader.Module):
    """–•—Ä–∞–Ω–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"""

    strings = {
        "name": "NotesMod",
        "what_note": "<b>–ö–∞–∫—É—é –∑–∞–ø–∏—Å–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?</b>\n\n<b>üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤:</b>\n<code>.notes</code>",
        "no_note": "<b>–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>",
        "save_what": "<b>–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∑–∞–º–µ—Ç–∫–µ, –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫—É!</b>",
        "what_name": "<b>–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∞!</b>",
        "saved": "<b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>",
        "notes_header": "<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:</b>\n\n",
        "notes_item": "<b>‚Ä¢</b> <code>{}</code>",
        "delnote_args": "<b>–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å?</b>",
        "delnote_done": "<b>–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!</b>",
        "delnotes_none": "<b>–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!</b>",
        "delnotes_done": "<b>–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã!</b>",
        "notes_none": "<b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫!</b>",
    }

    async def findnotecmd(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("what_note", message))
            return
        asset_id = self._db.get("friendly-telegram.modules.notes", "notes", {}).get(
            args[0], None
        )
        logger.debug(asset_id)
        asset = await self._db.fetch_asset(asset_id) if asset_id is not None else None
        if asset is None:
            self.del_note(args[0])
            await utils.answer(message, self.strings("no_note", message))
            return
        link = "https://t.me/c/{}/{}".format(asset.chat.id, asset.id)
        await message.edit(
            f'<b>–ó–∞–º–µ—Ç–∫–∞</b> "<code>{args[0]}</code>" <a href="{link}">–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å.</a>'
        )

    async def notecmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("what_note", message))
            return
        asset_id = self._db.get("friendly-telegram.modules.notes", "notes", {}).get(
            args[0], None
        )
        logger.debug(asset_id)
        asset = await self._db.fetch_asset(asset_id) if asset_id is not None else None
        if asset is None:
            self.del_note(args[0])
            await utils.answer(message, self.strings("no_note", message))
            return
        if message.out:
            await message.delete()
        await message.client.send_message(
            message.chat_id,
            await self._db.fetch_asset(asset_id),
            reply_to=await message.get_reply_message(),
        )

    async def delallnotescmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"""
        if not self._db.get("friendly-telegram.modules.notes", "notes", {}):
            await utils.answer(message, self.strings("delnotes_none", message))
            return
        self._db.get("friendly-telegram.modules.notes", "notes", {}).clear()
        await utils.answer(message, self.strings("delnotes_done", message))

    async def savecmd(self, message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É. –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–µ —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–∏–º—è –∑–∞–º–µ—Ç–∫–∏)"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("what_name", message))
            return
        if message.is_reply:
            target = await message.get_reply_message()
        elif len(args) < 2:
            await utils.answer(message, self.strings("save_what", message))
            return
        else:
            message.entities = None
            message.message = args[1]
            target = message
            logger.debug(target.message)
        asset_id = await self._db.store_asset(target)
        self._db.set(
            "friendly-telegram.modules.notes",
            "notes",
            {
                **self._db.get("friendly-telegram.modules.notes", "notes", {}),
                args[0]: asset_id,
            },
        )
        await utils.answer(message, str(self.strings("saved", message)).format(args[0]))

    async def delnotecmd(self, message):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ –∏–º–µ–Ω–∏"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("delnote_args", message))
        self.del_note(args[0])
        await utils.answer(message, self.strings("delnote_done", message))

    def del_note(self, note):
        old = self._db.get("friendly-telegram.modules.notes", "notes", {})
        try:
            del old[note]
        except KeyError:
            pass
        else:
            self._db.set("friendly-telegram.modules.notes", "notes", old)

    async def notescmd(self, message):
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫"""
        if not self._db.get("friendly-telegram.modules.notes", "notes", {}):
            await utils.answer(message, self.strings("notes_none", message))
            return
        await utils.answer(
            message,
            self.strings("notes_header", message)
            + "\n".join(
                self.strings("notes_item", message).format(key)
                for key in self._db.get("friendly-telegram.modules.notes", "notes", {})
            ),
        )

    async def client_ready(self, client, db):
        self._db = db
